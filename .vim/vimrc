filetype off

" http://learnvimscriptthehardway.stevelosh.com

call pathogen#infect()
call pathogen#helptags()

" Delete any existing autocommands must be before syntax lines
autocmd!

set nocompatible
filetype on
filetype plugin on
filetype indent on

autocmd Filetype html setlocal ts=2 sts=2 sw=2
autocmd Filetype xhtml setlocal ts=2 sts=2 sw=2
autocmd Filetype htmldjango setlocal ts=2 sts=2 sw=2
autocmd Filetype php setlocal ts=2 sts=2 sw=2
autocmd Filetype css setlocal ts=2 sts=2 sw=2
autocmd Filetype ruby setlocal ts=2 sts=2 sw=2
autocmd Filetype javascript setlocal ts=2 sts=2 sw=2
au BufReadCmd *.jar,*.xpi,*.sublime-package call zip#Browse(expand("<amatch>"))

autocmd BufNewFile,BufReadPost *.md set filetype=markdown


" syntax highlighting
syntax on
set background=dark
"colorscheme solarized
colorscheme slate

let g:syntastic_mode_map = { 
            \ 'mode': 'active',
            \ 'active_filetypes': ['python', 'cpp', 'php', 'javascript', 'css'],
            \ 'passive_filetypes': ['puppet'] } 
let g:syntastic_c_check_header = 1
let g:syntastic_c_compiler = 'clang'

let g:syntastic_cpp_checkers = ['cpplint']
let g:syntastic_cpp_cpplint_thres = 5

let g:syntastic_python_checkers = ['flake8']

let NERDTreeIgnore = ['\.pyc$', '\.sw[po]$']

" Clear then redraw
" noremap <c-L> :redraw!<CR>

map K :echo "no!"<cr>

set autowrite       " Automatically save before commands like :next and :make


" Store temporary files in a central spot
set backup
set backupdir=~/.vim-tmp//,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

if version >= 703
    if has('persistent_undo')
        set undofile
        set undodir=~/.vim-tmp/undo,~/.tmp/undo,/var/tmp/undo,/tmp/vim-undo
    endif
endif

set number
nmap <f2> :set number! number?<cr>
set cursorline

set pastetoggle=<F3>

set hidden

" Indentation
set ai ts=4 sw=4
set expandtab
set hlsearch
set smarttab
set softtabstop=4
set autoindent


" Disable Error Bell
set noeb vb t_vb=

set titlestring=%f title " Display filename in terminal window
set ruf=%l:%c ru " Display current column/line in bottom right
set sc " Show incomplete command at bottom right
set ic scs " Only be case sensitive when search contains uppercase

" autocomplete mode
set wildmode=longest,list

" C spacing errors
let c_comment_strings=1
let c_space_errors=1
let c_no_trail_space_error=0
let c_no_tab_space_error=0

" map the autocomplete key sequence to ctrl+space
imap <c-space> <c-x><c-o> 
" Change maplead to comma
let mapleader=","

" Ack
nnoremap <leader>ae :Ack --type=erl --type=python <cword><cr>
nnoremap <leader>a :Ack -a --type=nohtml <cword><cr>
nnoremap <leader>/ :AckFromSearch -a <cr>

" Buffer Movements
nnoremap <leader>n :bn<cr>
nnoremap <leader>p :bp<cr>

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" Source current line useful when editing VIMRC
vnoremap <leader>S y:execute @@<cr>
nnoremap <leader>S ^vg_y:execute @@<cr>
cmap w!! w !sudo tee % >/dev/null

" TagBar
nmap <F8> :TagbarToggle<CR>

" Was having problems calling functions properly
":nnoremap <CR> :nohlsearch<cr>

" Move around splits with <c-hjkl>
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Move half-page up/down with c-j/k
nnoremap <c-j> <c-d>
nnoremap <c-k> <c-u>

" find next/previous centers vertically in page
nnoremap n nzzzv
nnoremap N Nzzzv

" Don't immediately find the next instance of word
" With above and hlsearch makes for a nice search scheme
nnoremap * *<c-o>

 
" make some readline key combos work at ':'
cnoremap <c-a> <home>
cnoremap <c-e> <end>

" Delete to the end of the line
nnoremap D d$

" remap begin and end of line movements
nnoremap H ^
nnoremap L $

inoremap jj <ESC>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim Cast Stuff
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Toggle spell checking on and off with `,s`
nmap <silent> <leader>s :set spell!<CR>
cnoremap %% <C-R>=expand('%:h').'/'<cr>

nnoremap <silent> <leader>/ :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" UltiSnip
"
" Mappings are for mac terminal, which doesn't handle tab nicely.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:UltiSnipsSnippetDirectories = ["UltiSnips"]
imap <leader>, <tab>
imap <leader>ul <c-tab>
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsListSnippets = "<c-tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Current Window Numbering and Resizing (brilliant)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
:au WinEnter * :setlocal number
:au WinLeave * :setlocal nonumber

:au WinEnter * :set winfixheight
":au WinEnter * :wincmd =

" Open erlang files without typing nasty directory stuff
nnoremap <leader>er :e **/<cword>.erl<cr>
nmap <silent> <leader>ee :e **/<cword>.erl<CR>

" Use sane regexes.
nnoremap / /\v
vnoremap / /\v
